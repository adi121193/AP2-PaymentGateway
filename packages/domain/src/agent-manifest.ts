/**
 * Agent Manifest Schema
 *
 * Defines the structure for agent metadata and configuration.
 * Every agent published to FrameOS marketplace must include a valid manifest.
 *
 * @module agent-manifest
 * @version 1.0.0
 */

import { z } from "zod";

/**
 * Supported programming languages for agent runtime
 */
export const RuntimeLanguageSchema = z.enum([
  "nodejs",
  "python",
  "go",
  "rust",
]);

/**
 * Agent capabilities (permissions required)
 */
export const CapabilitySchema = z.enum([
  "http_request",        // Make HTTP requests (allowlisted domains)
  "browser_automation",  // Use Puppeteer/Playwright
  "file_read",          // Read files from mounted storage
  "file_write",         // Write files to mounted storage
  "database_access",    // Access to sandboxed database
]);

/**
 * Pricing models supported
 */
export const PricingModelSchema = z.enum([
  "per_execution",   // Fixed price per run
  "pay_per_use",     // Variable based on metered usage
  "subscription",    // Monthly/yearly subscription
  "free",           // Free tier (no payment)
]);

/**
 * Agent categories for marketplace discovery
 */
export const CategorySchema = z.enum([
  "automation",
  "data_enrichment",
  "outreach",
  "analytics",
  "content_generation",
  "research",
  "monitoring",
  "integration",
  "other",
]);

/**
 * Input parameter schema (JSON Schema-like)
 */
export const InputParameterSchema = z.object({
  name: z.string().min(1).max(100),
  type: z.enum([
    "string",
    "number",
    "boolean",
    "object",
    "array",
    "url",
    "email",
  ]),
  required: z.boolean().default(false),
  description: z.string().min(1).max(500),
  default: z.any().optional(),
  validation: z
    .object({
      min: z.number().optional(),           // For numbers/strings
      max: z.number().optional(),
      pattern: z.string().optional(),       // Regex pattern
      enum: z.array(z.string()).optional(), // Allowed values
    })
    .optional(),
});

/**
 * Output parameter schema
 */
export const OutputParameterSchema = z.object({
  name: z.string().min(1).max(100),
  type: z.enum([
    "string",
    "number",
    "boolean",
    "object",
    "array",
    "url",
  ]),
  description: z.string().min(1).max(500),
});

/**
 * Runtime configuration
 */
export const RuntimeConfigSchema = z.object({
  language: RuntimeLanguageSchema,
  version: z.string(), // e.g., "20" for Node.js, "3.11" for Python
  entrypoint: z.string().default("index.js"), // Entry file
  timeout_ms: z.number().int().min(1000).max(300000).default(300000), // 1s - 5min
  memory_mb: z.number().int().min(128).max(2048).default(512), // 128MB - 2GB
  cpu_cores: z.number().min(0.25).max(2).default(1), // 0.25 - 2 vCPUs
});

/**
 * Developer information
 */
export const DeveloperSchema = z.object({
  developer_id: z.string().min(1),
  name: z.string().min(1).max(100),
  email: z.string().email().optional(),
  website: z.string().url().optional(),
  company: z.string().max(100).optional(),
});

/**
 * Pricing configuration
 */
export const PricingSchema = z.object({
  model: PricingModelSchema,
  amount: z.number().int().min(0), // In minor units (paise)
  currency: z.string().length(3).default("INR"), // ISO 4217
  free_tier: z
    .object({
      executions_per_month: z.number().int().positive(),
    })
    .optional(),
});

/**
 * Environment variables required by agent
 */
export const EnvVarSchema = z.object({
  name: z.string().min(1).max(100),
  description: z.string().min(1).max(500),
  required: z.boolean().default(false),
  sensitive: z.boolean().default(false), // If true, encrypted in DB
  default: z.string().optional(),
});

/**
 * HTTP domain allowlist (for http_request capability)
 */
export const AllowedDomainSchema = z.object({
  domain: z.string(), // e.g., "api.linkedin.com"
  purpose: z.string(), // e.g., "LinkedIn API calls"
});

/**
 * Complete Agent Manifest Schema
 */
export const AgentManifestSchema = z.object({
  // Metadata
  id: z.string().optional(), // Auto-generated by platform
  name: z.string().min(1).max(100),
  slug: z
    .string()
    .min(1)
    .max(100)
    .regex(/^[a-z0-9-]+$/, "Slug must be lowercase alphanumeric with hyphens"),
  version: z.string().regex(/^\d+\.\d+\.\d+$/, "Must be semantic version (e.g., 1.0.0)"),
  description: z.string().min(10).max(500),
  long_description: z.string().max(5000).optional(), // Markdown supported

  // Developer info
  author: DeveloperSchema.optional(), // Auto-populated by platform

  // Categorization
  category: CategorySchema,
  tags: z.array(z.string().max(50)).max(10).default([]),

  // Pricing
  pricing: PricingSchema,

  // Inputs/Outputs
  inputs: z.array(InputParameterSchema).min(0).max(20),
  outputs: z.array(OutputParameterSchema).min(0).max(20),

  // Runtime
  runtime: RuntimeConfigSchema,

  // Permissions
  capabilities: z.array(CapabilitySchema).default([]),
  allowed_domains: z.array(AllowedDomainSchema).optional(), // Required if http_request capability

  // Environment variables
  env_vars: z.array(EnvVarSchema).default([]),

  // Icons & Media
  icon_url: z.string().url().optional(),
  screenshots: z.array(z.string().url()).max(5).optional(),
  demo_video_url: z.string().url().optional(),

  // Documentation
  readme: z.string().max(10000).optional(), // Markdown
  changelog: z.string().max(5000).optional(), // Markdown

  // Links
  homepage: z.string().url().optional(),
  repository: z.string().url().optional(),
  documentation: z.string().url().optional(),
  support_email: z.string().email().optional(),

  // Metadata
  created_at: z.string().datetime().optional(), // ISO 8601
  updated_at: z.string().datetime().optional(),
});

/**
 * TypeScript types inferred from Zod schemas
 */
export type RuntimeLanguage = z.infer<typeof RuntimeLanguageSchema>;
export type Capability = z.infer<typeof CapabilitySchema>;
export type PricingModel = z.infer<typeof PricingModelSchema>;
export type Category = z.infer<typeof CategorySchema>;
export type InputParameter = z.infer<typeof InputParameterSchema>;
export type OutputParameter = z.infer<typeof OutputParameterSchema>;
export type RuntimeConfig = z.infer<typeof RuntimeConfigSchema>;
export type Developer = z.infer<typeof DeveloperSchema>;
export type Pricing = z.infer<typeof PricingSchema>;
export type EnvVar = z.infer<typeof EnvVarSchema>;
export type AllowedDomain = z.infer<typeof AllowedDomainSchema>;
export type AgentManifest = z.infer<typeof AgentManifestSchema>;

/**
 * Validation helper
 */
export function validateManifest(
  manifest: unknown
): { valid: true; data: AgentManifest } | { valid: false; errors: string[] } {
  try {
    const data = AgentManifestSchema.parse(manifest);
    return { valid: true, data };
  } catch (error) {
    if (error instanceof z.ZodError) {
      const errors = error.errors.map(
        (err) => `${err.path.join(".")}: ${err.message}`
      );
      return { valid: false, errors };
    }
    return { valid: false, errors: ["Unknown validation error"] };
  }
}

/**
 * Example manifests for reference
 */
export const EXAMPLE_MANIFESTS = {
  /**
   * Simple per-execution agent
   */
  linkedin_outreach: {
    name: "LinkedIn Cold Outreach Agent",
    slug: "linkedin-outreach-agent",
    version: "1.0.0",
    description: "Automate LinkedIn connection requests with personalized messages",
    category: "outreach",
    tags: ["linkedin", "outreach", "b2b", "sales"],
    pricing: {
      model: "per_execution",
      amount: 50, // ₹0.50
      currency: "INR",
    },
    inputs: [
      {
        name: "target_profile_url",
        type: "url",
        required: true,
        description: "LinkedIn profile URL of the target person",
        validation: {
          pattern: "^https://www\\.linkedin\\.com/in/[a-zA-Z0-9-]+/?$",
        },
      },
      {
        name: "personalized_message",
        type: "string",
        required: false,
        description: "Custom message to send with connection request",
        validation: {
          max: 300,
        },
      },
    ],
    outputs: [
      {
        name: "connection_sent",
        type: "boolean",
        description: "Whether connection request was sent successfully",
      },
      {
        name: "profile_name",
        type: "string",
        description: "Name of the target person",
      },
    ],
    runtime: {
      language: "nodejs",
      version: "20",
      entrypoint: "index.js",
      timeout_ms: 60000, // 1 minute
      memory_mb: 512,
      cpu_cores: 1,
    },
    capabilities: ["http_request"],
    allowed_domains: [
      {
        domain: "www.linkedin.com",
        purpose: "LinkedIn API and web scraping",
      },
    ],
    env_vars: [
      {
        name: "LINKEDIN_SESSION_COOKIE",
        description: "Your LinkedIn session cookie (li_at)",
        required: true,
        sensitive: true,
      },
    ],
  } satisfies Partial<AgentManifest>,

  /**
   * Pay-per-use agent with metered billing
   */
  email_enrichment: {
    name: "Email Enrichment Agent",
    slug: "email-enrichment-agent",
    version: "2.1.0",
    description: "Enrich email addresses with company info, social profiles, and contact details",
    category: "data_enrichment",
    tags: ["email", "enrichment", "data", "clearbit"],
    pricing: {
      model: "pay_per_use",
      amount: 10, // ₹0.10 per email enriched
      currency: "INR",
      free_tier: {
        executions_per_month: 100,
      },
    },
    inputs: [
      {
        name: "emails",
        type: "array",
        required: true,
        description: "Array of email addresses to enrich",
        validation: {
          min: 1,
          max: 1000,
        },
      },
    ],
    outputs: [
      {
        name: "enriched_contacts",
        type: "array",
        description: "Array of enriched contact objects",
      },
      {
        name: "total_enriched",
        type: "number",
        description: "Number of successfully enriched emails",
      },
    ],
    runtime: {
      language: "nodejs",
      version: "20",
      entrypoint: "index.js",
      timeout_ms: 180000, // 3 minutes
      memory_mb: 1024,
      cpu_cores: 2,
    },
    capabilities: ["http_request"],
    allowed_domains: [
      {
        domain: "clearbit.com",
        purpose: "Clearbit Enrichment API",
      },
      {
        domain: "hunter.io",
        purpose: "Email verification",
      },
    ],
    env_vars: [
      {
        name: "CLEARBIT_API_KEY",
        description: "Clearbit API key",
        required: true,
        sensitive: true,
      },
    ],
  } satisfies Partial<AgentManifest>,

  /**
   * Subscription-based agent
   */
  seo_monitor: {
    name: "SEO Rank Monitor",
    slug: "seo-rank-monitor",
    version: "1.5.2",
    description: "Monitor your website's SEO rankings across multiple keywords daily",
    category: "monitoring",
    tags: ["seo", "monitoring", "rankings", "analytics"],
    pricing: {
      model: "subscription",
      amount: 99900, // ₹999/month
      currency: "INR",
    },
    inputs: [
      {
        name: "website_url",
        type: "url",
        required: true,
        description: "Your website URL",
      },
      {
        name: "keywords",
        type: "array",
        required: true,
        description: "List of keywords to track",
        validation: {
          min: 1,
          max: 100,
        },
      },
    ],
    outputs: [
      {
        name: "rankings",
        type: "array",
        description: "Array of ranking data per keyword",
      },
      {
        name: "average_position",
        type: "number",
        description: "Average ranking position across all keywords",
      },
    ],
    runtime: {
      language: "python",
      version: "3.11",
      entrypoint: "main.py",
      timeout_ms: 300000, // 5 minutes
      memory_mb: 1024,
      cpu_cores: 1,
    },
    capabilities: ["http_request", "database_access"],
    allowed_domains: [
      {
        domain: "google.com",
        purpose: "Google Search API",
      },
    ],
    env_vars: [
      {
        name: "GOOGLE_API_KEY",
        description: "Google Custom Search API key",
        required: true,
        sensitive: true,
      },
    ],
  } satisfies Partial<AgentManifest>,

  /**
   * Free tier agent
   */
  website_screenshot: {
    name: "Website Screenshot Tool",
    slug: "website-screenshot",
    version: "1.0.0",
    description: "Capture full-page screenshots of any website",
    category: "automation",
    tags: ["screenshot", "puppeteer", "web", "testing"],
    pricing: {
      model: "free",
      amount: 0,
      currency: "INR",
    },
    inputs: [
      {
        name: "url",
        type: "url",
        required: true,
        description: "URL of the website to screenshot",
      },
      {
        name: "full_page",
        type: "boolean",
        required: false,
        description: "Capture full page or just viewport",
        default: true,
      },
    ],
    outputs: [
      {
        name: "screenshot_url",
        type: "url",
        description: "URL of the captured screenshot",
      },
    ],
    runtime: {
      language: "nodejs",
      version: "20",
      entrypoint: "index.js",
      timeout_ms: 30000, // 30 seconds
      memory_mb: 512,
      cpu_cores: 1,
    },
    capabilities: ["browser_automation"],
  } satisfies Partial<AgentManifest>,
};

/**
 * Helper to create minimal valid manifest
 */
export function createMinimalManifest(
  name: string,
  slug: string,
  category: Category
): AgentManifest {
  return AgentManifestSchema.parse({
    name,
    slug,
    version: "1.0.0",
    description: `${name} - An automated agent`,
    category,
    pricing: {
      model: "free",
      amount: 0,
      currency: "INR",
    },
    inputs: [],
    outputs: [],
    runtime: {
      language: "nodejs",
      version: "20",
      entrypoint: "index.js",
      timeout_ms: 300000,
      memory_mb: 512,
      cpu_cores: 1,
    },
    capabilities: [],
    tags: [],
    env_vars: [],
  });
}
