version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: ap2-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: ap2_gateway
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: ap2-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ..
      dockerfile: infra/docker/Dockerfile
    container_name: ap2-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://postgres:password@postgres:5432/ap2_gateway?schema=public
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      MANDATE_SIGN_KEY: ${MANDATE_SIGN_KEY}
      JWT_SECRET: ${JWT_SECRET}
      ALLOWED_ORIGINS: http://localhost:3000
      LOG_LEVEL: debug
    ports:
      - '3000:3000'
    volumes:
      - ../apps:/app/apps
      - ../packages:/app/packages
    command: npm run dev

volumes:
  postgres_data:
  redis_data:
